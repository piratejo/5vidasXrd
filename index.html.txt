<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>5vidasXRD — Juego online</title>
  <style>
    :root{--bg:#071029;--panel:#0b1220;--accent:#06b6d4;--muted:#94a3b8}
    body{margin:0;font-family:Inter,system-ui,Arial,sans-serif;background:linear-gradient(180deg,#071029,#071827);color:#e6eef6}
    .wrap{max-width:1100px;margin:20px auto;padding:18px;background:rgba(255,255,255,0.02);border-radius:12px}
    h1{margin:0 0 8px}
    .grid{display:grid;grid-template-columns:1fr 360px;gap:16px}
    .card{background:rgba(255,255,255,0.02);padding:12px;border-radius:10px}
    label{font-size:13px;color:var(--muted);display:block;margin-bottom:6px}
    input,button,select{padding:8px;border-radius:8px;border:none}
    button{cursor:pointer}
    .players{display:flex;flex-direction:column;gap:6px}
    .playerItem{display:flex;justify-content:space-between;padding:8px;background:rgba(255,255,255,0.01);border-radius:6px}
    .hand{display:flex;gap:8px;flex-wrap:wrap;margin-top:12px}
    .cardNum{width:56px;height:80px;background:#fff;color:#021;display:flex;align-items:center;justify-content:center;border-radius:8px;font-weight:700;cursor:pointer}
    .cardNum.small{width:42px;height:60px;font-size:14px}
    .selected{outline:3px solid rgba(6,182,212,0.35)}
    .log{height:220px;overflow:auto;background:rgba(0,0,0,0.2);padding:10px;border-radius:8px;font-size:13px}
    .controls{display:flex;gap:8px;flex-wrap:wrap}
    .muted{color:var(--muted);font-size:13px}
    .hidden{display:none}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>5vidasXRD</h1>
    <div class="grid">
      <div>
        <div class="card">
          <div class="controls">
            <label>Tu nombre
              <input id="nameInput" placeholder="Tu nombre" />
            </label>

            <label>Room id (crear o unirse)
              <input id="roomInput" placeholder="Código de sala (ej: ABC123)" />
            </label>

            <button id="createRoom">Crear sala</button>
            <button id="joinRoom">Unirse a sala</button>
          </div>

          <hr />

          <div class="muted">Configuración</div>
          <div style="display:flex;gap:8px;margin-top:8px">
            <label>Jugadores:
              <select id="playersCount">
                <option>2</option><option>3</option><option selected>4</option><option>5</option><option>6</option>
              </select>
            </label>
            <label>Vidas:
              <input id="livesCount" type="number" min="1" value="5" style="width:72px" />
            </label>
          </div>

          <hr />

          <div id="roomInfo" class="muted">No estás en ninguna sala.</div>

          <div style="margin-top:12px">
            <div class="muted">Jugadores en sala</div>
            <div id="playersList" class="players"></div>
          </div>

        </div>

        <div class="card" style="margin-top:12px">
          <div class="muted">Juego</div>
          <div style="margin-top:8px">Ronda: <span id="handSize">-</span> cartas — Turno: <strong id="turnName">-</strong></div>

          <div style="margin-top:8px">
            <div id="bidArea" class="muted hidden">Tu apuesta: <input id="bidInput" type="number" style="width:80px"/> <button id="confirmBid">Confirmar apuesta</button></div>
            <div id="handArea" class="muted hidden">
              <div>Tu mano</div>
              <div id="yourHand" class="hand"></div>
              <div style="margin-top:8px"><button id="playBtn">Jugar carta</button></div>
            </div>
          </div>

          <div style="margin-top:12px">
            <div class="muted">Registro</div>
            <div id="log" class="log"></div>
          </div>
        </div>
      </div>

      <div>
        <div class="card">
          <div class="muted">Mesa</div>
          <div style="margin-top:12px">Jugadas actuales:</div>
          <div id="tableCards" class="hand" style="margin-top:8px"></div>
          <div style="margin-top:12px">Estado de la partida:</div>
          <pre id="rawState" style="font-size:12px;background:rgba(0,0,0,0.15);padding:8px;border-radius:6px;height:260px;overflow:auto"></pre>
        </div>
      </div>
    </div>
  </div>

  <!-- Firebase SDK (modular) -->
  <script type="module">
    // --- PASTE YOUR FIREBASE CONFIG HERE ---
    const firebaseConfig = {
      apiKey: "AIzaSyA01UIK-bv56xAzhNzJTSX4vqIfWUA3wlo",
      authDomain: "vidasxrd.firebaseapp.com",
      databaseURL: "https://vidasxrd-default-rtdb.firebaseio.com",
      projectId: "vidasxrd",
      storageBucket: "vidasxrd.firebasestorage.app",
      messagingSenderId: "409195809551",
      appId: "1:409195809551:web:26cc9eaedd14902c74cc7a",
      measurementId: "G-BT59K2TFV5"
    };
    // --------------------------------------

    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';
    import { getDatabase, ref, set, update, onValue, push, get } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-database.js';

    const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);

    // ---------------- Lógica del juego (multijugador) ----------------
    function makeDeck(){
      const d = [];
      for(let i=1;i<=12;i++) for(let j=0;j<4;j++) d.push(i);
      return d;
    }
    function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } }

    // Referencias a elementos UI
    const nameInput = document.getElementById('nameInput');
    const roomInput = document.getElementById('roomInput');
    const createRoomBtn = document.getElementById('createRoom');
    const joinRoomBtn = document.getElementById('joinRoom');
    const playersListDiv = document.getElementById('playersList');
    const roomInfo = document.getElementById('roomInfo');
    const playersCountSel = document.getElementById('playersCount');
    const livesCountInput = document.getElementById('livesCount');
    const handSizeSpan = document.getElementById('handSize');
    const turnNameSpan = document.getElementById('turnName');
    const yourHandDiv = document.getElementById('yourHand');
    const bidArea = document.getElementById('bidArea');
    const bidInput = document.getElementById('bidInput');
    const confirmBidBtn = document.getElementById('confirmBid');
    const playBtn = document.getElementById('playBtn');
    const logDiv = document.getElementById('log');
    const tableCardsDiv = document.getElementById('tableCards');
    const rawStatePre = document.getElementById('rawState');

    let roomId = null;
    let myId = null;

    createRoomBtn.addEventListener('click', async ()=>{
      const id = (Math.random().toString(36).slice(2,8)).toUpperCase();
      roomInput.value = id;
      await setupRoom(id,true);
    });
    joinRoomBtn.addEventListener('click', async ()=>{
      const id = roomInput.value.trim().toUpperCase();
      if(!id) return alert('Pon un código de sala');
      await setupRoom(id,false);
    });

    async function setupRoom(id, creating){
      roomId = id;
      roomInfo.textContent = 'Conectando a sala '+roomId+'...';
      myId = 'p_'+Math.random().toString(36).slice(2,9);

      const roomRef = ref(db, 'rooms/'+roomId+'/state');
      if(creating){
        const initial = {
          name: '5vidasXRD',
          handSize: 5,
          cycle: [5,4,3,2,1],
          cycleIndex: 0,
          players: {},
          table: [],
          phase: 'lobby',
          turn: null,
          log: []
        };
        await set(ref(db, 'rooms/'+roomId), { state: initial, createdAt: Date.now() });
      }

      const name = nameInput.value.trim() || 'Jugador';
      const playerObj = { id: myId, name, human: true, lives: parseInt(livesCountInput.value)||5, hand: [], bid: null, tricks: 0, out: false };
      await update(ref(db,'rooms/'+roomId+'/state/players'), { [myId]: playerObj });

      onValue(roomRef, (snap)=>{
        const state = snap.val();
        if(!state) return;
        renderState(state);
      });

      roomInfo.textContent =
